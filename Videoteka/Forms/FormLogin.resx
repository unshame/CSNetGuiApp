<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABwAAAAkAAAAJAAAACQAA
        AAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAA
        AAkAAAAJAAAACQAAAAkAAAAJAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARwaGkIwLCukMS0sqzEt
        LKsxLSyrMS0sqzEtLKsxLSyrMS0sqzEtLKsxLSyrMS0sqzEtLKsxLSyrMCwsqzAsLKswLCyrMCwsqzAs
        LKsxLCyrMSwsqzEsLKsxLCyrMS0sqzEtLKstKSiVEQ8PHQAAAAAAAAAAAAAAAAAAAAAMCwsJQz496EpE
        Q/9KREP/SkRD/0pEQ/9KREP/SkRD/0pEQ/9KREP/SkRD/0pEQ/9KREP/SkRD/0hCQf9HQUH/R0JB/0hC
        Qf9IQkH/SEJB/0hDQv9JQ0L/SUNC/0lDQv9JQ0L/SkRD/0pEQ/89ODehAAAAAQAAAAAAAAAAAAAAADMw
        LxZKREP/SkRD/0pEQ/9KREP/SkRD/0pEQ/9KREP/SkRD/0pEQ/9KREP/SkRD/0lDQv9GQkD/R0FA/0dB
        QP9HQUH/R0JB/0hCQf9IQkH/SEJB/0hDQv9JQ0L/SUNC/0lDQv9JQ0L/SkRD/0hCQcQAAAABAAAAAAAA
        AAAAAAAANjIxFkpEQ/9KREP/SkRD/0pEQ/9KREP/SkRD/0pEQ/9KREP/SkRD/0pEQ/9IQkH/RkA//0ZA
        QP9GQUD/R0FA/0dBQP9HQUH/R0JB/0hCQf9IQkH/SEJB/0hDQv9JQ0L/SUNC/0lDQv9JQ0L/SEJBxQAA
        AAEAAAAAAAAAAAAAAAA2MjEWSkRD/0pEQ/9KREP/SkRD/0pEQ/9KREP/SkRD/0pEQ/9KREP/R0FA/0VA
        P/9FQD//RkA//0ZAQP9GQUD/R0FA/0dBQP9HQUH/R0JB/0hCQf9IQkH/SEJB/0hDQv9JQ0L/SUNC/0lD
        Qv9HQUDFAAAAAQAAAAAAAAAAAAAAADYyMRZKREP/SkRD/0pEQ/9KREP/SkRD/0pEQ/9KREP/SUNC/0VA
        P/9EPz7/RT8+/0VAP/9FQD//RkA//0ZAQP9GQUD/R0FA/0dBQP9HQUH/R0JB/0hCQf9IQkH/SEJB/0hD
        Qv9JQ0L/SUNC/0dBQMUAAAABAAAAAAAAAAAAAAAANjIxFkpEQ/9KREP/SkRD/0pEQ/9KREP/SkRD/0dB
        QP9DPj3/RD49/0Q/Pv9EPz7/RT8+/0VAP/9FQD//RkA//0ZAQP9GQUD/R0FA/0dBQP9HQUH/R0JB/0hC
        Qf9IQkH/SEJB/0hDQv9JQ0L/R0FAxQAAAAEAAAAAAAAAAAAAAAA3MzIWSkRD/0pEQ/9KREP/SkRD/0pE
        Q/9FPz//Qj08/0M9Pf9DPj3/RD49/0Q/Pv9EPz7/RT8+/0VAP/9FQD//RkA//0ZAQP9GQUD/R0FA/0dB
        QP9HQUH/R0JB/0hCQf9IQkH/SEJB/0hDQv9HQUDFAAAAAQAAAAAAAAAAAAAAADo2NRVKREP/SkRD/0pE
        Q/9IQ0L/Qj08/0E8O/9CPDz/Qj08/0M9Pf9DPj3/RD49/0Q/Pv9EPz7/RT8+/0VAP/9FQD//RkA//0ZA
        QP9GQUD/R0FA/0dBQP9HQUH/R0JB/0hCQf9IQkH/SEJB/0ZBQMUAAAABAAAAAAAAAAAAAAAAOTU0FEpE
        Q/9KREP/RkA//0A7Ov9AOzr/QDs7/0E8O/9CPDz/Qj08/0M9Pf9DPj3/RD49/0Q/Pv9EPz7/RT8+/0VA
        P/9FQD//RkA//0ZAQP9GQUD/R0FA/0dBQP9HQUH/R0JB/0hCQf9IQkH/RkA/xQAAAAEAAAAAAAAAAAAA
        AAA4NDMVSkRC/0I8PP89ODj/Pjk5/z86Of9AOzr/QDs7/0E8O/9CPDz/Qj08/0M9Pf9DPj3/RD49/0Q/
        Pv9EPz7/RT8+/0VAP/9FQD//RkA//0ZAQP9GQUD/R0FA/0dBQP9HQUH/R0JB/0hCQf9GQD/FAAAAAQAA
        AAAAAAAAAAAAACcjIhxHRET/R0VF/0hGRv8wa4j/Knec/yp3nP86YHP/SkhI/zxeb/8seJ3/LHid/y52
        mP9KTE3/O2N2/y16n/8ue6D/Nm+L/05LS/9FWGL/Lnug/y56n/8veJr/S05Q/05KSv9OS0r/TktK/0xJ
        ScUAAAABAAAAAAAAAAAAAAAAJiAfUTMtLP9QT0//VFRU/0pjbv8arO//FbT+/xay+v9Acon/UlZY/yaa
        0P8VtP7/FbT+/yuSwv9QWl7/IqDa/xW0/v8VtP7/NISq/1RUVP8wirT/FbT+/xW0/v8mms//UlZY/1RU
        VP9UVFT/UlJSxQAAAAEAAAAAAAAAAAAAAAAqIyFxLCUj/zErKf9OTU3/VFRU/0hndf8ZrvT/FbT+/xay
        +/8/dI3/Ulhb/ySe1/8VtP7/FbT+/zKIr/9QW2D/IKPg/xW0/v8VtP7/NISq/1RUVf8tkL7/FbT+/xW0
        /v8plsn/U1ZX/1RUVP9SUlLFAAAAAQAAAAAAAAAAAAAAACojIXIsJSP/LCUj/y8pJ/9MSkr/VFRU/0Vr
        fP8XsPj/FbT+/xay+/8/dI3/UFpf/yGi3v8VtP7/FbT+/zaBo/9OXmX/Hqfn/xW0/v8VtP7/NISq/1NV
        Vv8qlcf/FbT+/xW0/v8sksH/VFVW/1JSUsQAAAABAAAAAAAAAAAAAAAAKiMhcywlI/8sJSP/LCUj/zIs
        K/5JSUm1REREjC14m34UrvV0FbP9cRiw+HBQW2BwSGd2cBW0/nAVtP5wFrT+cEpibnBCcIZwFbT+cBW0
        /nAVtP5wRmp6cFBaXnAYsPZwFbT+cBW0/nA/dI1wVFRUVAAAAAAAAAAAAAAAAAAAAAArJSOCLCUj/y0m
        JP8/Ozr/UVFR/1NTU/9RUVHwL3STwBCLxIoMYYlNAQQFHgAAAA4AAAAEAAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABE9P
        TtJBPjz/Tk5N/1NTU/9TU1P/TVxj/ymUxv8VtP7/FbT+/xex+f85dpPuSkpKvzNXZ4sMaZNUAg8WIwAA
        ABEAAAAGAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABMTEwDVFRUbFVUVKZTU1PgU1NT/zx3kv8arfL/FbT+/xW0/v8fpOP/SGVz/1JUVf83fqD/GLD3/xW0
        /v8Vsfr1KYGpykJCQpcvPkZfBCU0KwABAhUCBQcIAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8dpEbFbT+VxW0/pAVtP7KLo+8+VBXWv9HZXP/IqDc/xW0
        /v8VtP7/Ga7y/zx3k/9TU1P/Qm6C/x2o6f8Vs/z7E6fs1RqHuqU5OTptGhoaNAACAhgFDhIMBQ0RAwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABiXVwIUGBoPBew
        +HgVtP6yFbT+6yiWyP9NXGT/T1pf/yyQvv8VtP7/FbT+/xW0/v8qk8T/Tlpg/0Zndv8fpeP+FKvx4BKa
        2rEUfrB8JSUmQAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABKhqQBWVdWJFFWWF4fpeOZFbT+0xW0/v0arPD/PnOM/1JUVv81gqf/FrL7/xW0
        /v8VtP7/IqDb/0ljb/9TU1P/T09PUQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFbT+EERqfEZTU1R/KJfKuxW0
        /vIVtP7/FrL6/zWCpv9SVFb/U1NT/1NTU/5JSUkXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAFbT+AxW0/i87eJVnU1NTn1NTU9pTU1P/UlJS1QAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFJSUhRTU1MpAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////////4AAAB8AAAAPAAAABwAAAAcAAAAHAAAABwAAAAcAA
        AAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAPAAP//gAAP/4AAAP/4AAAP/4AAA//4
        AAP//8AD///8A////+f///////////////8=
</value>
  </data>
</root>